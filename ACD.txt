String Acceptance Using DFA:
#include <iostream>
#include <string>
using namespace std
int main() {
    string finalState = "q2";
    string initialState = "q0";
    string temp = initialState;

    string inputString;
    cout << "Enter the Input String: ";
    cin >> inputString;

    for (char i : inputString) {
        if (temp == "q0" && i == 'a') {
            temp = "q1";
        } else if (temp == "q1" && i == 'a') {
            temp = "q2";
        } else if (temp == "q2" && i == 'b') {
            temp = "q1";
        } else {
            break;
        }
    }

    cout << "Acceptance: " << (temp == finalState) << std::endl;

    return 0;
}


NFA TO DFA CONVERSION

#include <stdio.h>
int main()
{
    int nfa[5][2];
    nfa[1][1]=12;
    nfa[1][2]=1;
    nfa[2][1]=0;
    nfa[2][2]=3;
    nfa[3][1]=0;
    nfa[3][2]=4;
    nfa[4][1]=0;
    nfa[4][2]=0;
    int dfa[10][2];
    int dstate[10];
    int i=1,n,j,k,flag=0,m,q,r;
    dstate[i++]=1;
    n=i;
    
    dfa[1][1]=nfa[1][1];
    dfa[1][2]=nfa[1][2];
    printf("\nf(%d,a)=%d",dstate[1],dfa[1][1]);
    printf("\nf(%d,b)=%d",dstate[1],dfa[1][2]);
    
 for(j=1;j<n;j++)
    {
        if(dfa[1][1]!=dstate[j])
          flag++;  
    }
    if(flag==n-1)
    {
        dstate[i++]=dfa[1][1];
        n++;
    }
    flag=0;
    for(j=1;j<n;j++)
    {
         if(dfa[1][2]!=dstate[j])
            flag++;
    }
    if(flag==n-1)
    {
         dstate[i++]=dfa[1][2];  
         n++;   
    }
    k=2;
    while(dstate[k]!=0)
    {
        m=dstate[k];
        if(m>10)
        {
            q=m/10;
            r=m%10;
        }
        if(nfa[r][1]!=0)
             dfa[k][1]=nfa[q][1]*10+nfa[r][1];
        else
            dfa[k][1]=nfa[q][1];
        if(nfa[r][2]!=0)
            dfa[k][2]=nfa[q][2]*10+nfa[r][2];
        else
            dfa[k][2]=nfa[q][2];
        
        printf("\nf(%d,a)=%d",dstate[k],dfa[k][1]);
        printf("\nf(%d,b)=%d",dstate[k],dfa[k][2]);
        
       flag=0;    
        for(j=1;j<n;j++)
        {
         if(dfa[k][1]!=dstate[j])
          flag++;  
        }
      if(flag==n-1)
     {
        dstate[i++]=dfa[k][1];
        n++;
     }
    flag=0;
    for(j=1;j<n;j++)
    {
         if(dfa[k][2]!=dstate[j])
            flag++;
    }
    if(flag==n-1)
    {
         dstate[i++]=dfa[k][2];  
         n++;   
    }
    k++;
    }
    return 0;
}

PDA
#include <iostream>
#include <string>
#include <vector>

using namespace std;

int main() {
    string givstr = "aabbe";
    vector<char> stk = {'z', '0'};
    
    cout << "(Q0 , " << string(stk.rbegin(), stk.rend()) << ")" << endl;

    for (size_t i = 1; i < givstr.size(); ++i) {
        if (stk.back() != 'e' && stk.back() == givstr[i]) {
            stk.push_back(givstr[i]);
            cout << "(Q0 , " << string(stk.rbegin(), stk.rend()) << ")" << endl;
        } else if (stk.back() != givstr[i] && givstr[i] != 'e') {
            stk.pop_back();
            cout << "(Q1 , E)" << endl;
        } else {
            cout << "(Q2 , E)" << endl;
        }
    }

    return 0;
}

Three Address Code
#include <iostream>
#include <string>
#include <stack>

using namespace std;

// Function to check if a character is an operator
bool isOperator(char c) {
    return (c == '+' || c == '-' || c == '*' || c == '/');
}

// Function to generate three-address code
void generateThreeAddressCode(const string& expression) {
    stack<string> stack;
    int tempCounter = 0;

    for (char c : expression) {
        if (isalnum(c)) {
            string operand(1, c);
            stack.push(operand);
        } else if (isOperator(c)) {
            string operand2 = stack.top();
            stack.pop();
            string operand1 = stack.top();
            stack.pop();

            string temp = "t" + to_string(tempCounter++);
            cout << temp << " = " << operand1 << " " << c << " " << operand2 << endl;
            stack.push(temp);
        }
    }

    cout << "Result: " << stack.top() << endl;
}

int main() {
    string expression;
    cout << "Enter an arithmetic expression: ";
    getline(cin, expression);

    generateThreeAddressCode(expression);

    return 0;
}
